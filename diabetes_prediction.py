# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SnAB-abg_KUDjXN30kcSYWOLQQu4pEP5
"""

import streamlit as st
import pandas as pd
import joblib
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from PIL import Image




# Streamlit app
st.title("Diabetes Detection App")

#Load data
data = pd.read_csv('diabetes.csv')
data1 = pd.concat([data]*3, ignore_index=True)



#fit the model
x = data1.drop(['Outcome'], axis = 1)
y = data1['Outcome']
x_train,X_test,y_train,y_test = train_test_split(x,y,test_size=0.17,random_state=0)

model = tree.DecisionTreeClassifier()
model.fit(x_train, y_train)

#image
st.image("images.jpg", width=500)

# Sidebar for user input
st.sidebar.header("User Input")

# Create input fields for each feature
pregnancies = st.sidebar.number_input("Number of Pregnancies", min_value=0, max_value=20, value=0)
glucose = st.sidebar.number_input("Glucose Level", min_value=0, max_value=200, value=100)
blood_pressure = st.sidebar.number_input("Blood Pressure (mm Hg)", min_value=0, max_value=200, value=70)
skin_thickness = st.sidebar.number_input("Skin Thickness (mm)", min_value=0, max_value=100, value=20)
insulin = st.sidebar.number_input("Insulin Level (mu U/ml)", min_value=0, max_value=500, value=30)
bmi = st.sidebar.number_input("Body Mass Index (BMI)", min_value=0.0, max_value=70.0, value=25.0)
diabetes_pedigree = st.sidebar.number_input("Diabetes Pedigree Function", min_value=0.0, max_value=2.5, value=0.5)
age = st.sidebar.slider('Age', 21, 81, 29)


# Create a DataFrame from the user input
user_input = pd.DataFrame({
    'Pregnancies': [pregnancies],
    'Glucose': [glucose],
    'BloodPressure': [blood_pressure],
    'SkinThickness': [skin_thickness],
    'Insulin': [insulin],
    'BMI': [bmi],
    'DiabetesPedigreeFunction': [diabetes_pedigree],
    'Age': [age]
})

# Predict using the trained model
if st.sidebar.button("Predict"):
    prediction = model.predict(user_input)
    prediction_proba = model.predict_proba(user_input) # Get probabilities



    # Display the prediction result
    if prediction[0] == 1:
            st.markdown('<p style="color:red;">This person has diabetes.</p>', unsafe_allow_html=True)
            st.markdown("""
    <div style="background-color: #ffcccc; padding: 15px; border-radius: 10px;">
        <h3 style="color: #b30000;">🩺 Advice for Managing Diabetes:</h3>
        <ul style="color: #333;">
            <li>📝 <strong>Follow your doctor’s advice</strong> and create a diabetes management plan.</li>
            <li>📉 <strong>Monitor your blood sugar levels</strong> regularly.</li>
            <li>🥗 <strong>Eat a balanced, low glycemic index diet</strong> to manage blood sugar.</li>
            <li>🏃‍♂️ <strong>Exercise regularly</strong> to maintain healthy glucose levels.</li>
            <li>💊 <strong>Take your medication</strong> as prescribed by your healthcare provider.</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)


    else:
        st.markdown('<p style="color:green;">This person does not have diabetes.</p>', unsafe_allow_html=True)
        st.markdown("""
    <div style="background-color: #ccffcc; padding: 15px; border-radius: 10px;">
        <h3 style="color: #006600;">🍎 Advice for Maintaining Health:</h3>
        <ul style="color: #333;">
            <li>🥗 <strong>Maintain a balanced diet</strong> rich in vegetables, lean protein, and whole grains.</li>
            <li>🏃‍♂️ <strong>Exercise regularly</strong>, aiming for 150 minutes of moderate activity per week.</li>
            <li>⚖️ <strong>Keep a healthy weight</strong> to reduce your risk of developing diabetes.</li>
            <li>💧 <strong>Stay hydrated</strong> by drinking plenty of water and limiting sugary drinks.</li>
            <li>🩺 <strong>Regular checkups</strong> with your doctor are key to staying healthy.</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)



# Model evaluation (optional)
if st.sidebar.button("Evaluate Model"):
    from sklearn.metrics import accuracy_score
    y_pred_test = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred_test)
    st.write(f"Model Accuracy on Test Set: {accuracy * 100:.2f}%")